class Solution {
    

public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
              //creating adjlist
         unordered_map<int, list<int>>adj;
            for(int i=0;i<prerequisites.size();i++){
                 int u = prerequisites[i][0];
                 int v = prerequisites[i][1];
                 
                 adj[u].push_back(v);
            }
        unordered_map<int, bool>visited;
        stack<int>s;
        for(int i=0;i<numCourses;i++){
                 if(!visited[i]){
                     dfs(i,adj,s,visited);
                 }
        }
        vector<int>ans;
        while(!s.empty()){    
             ans.push_back(s.top());
            s.pop();
        }
        return ans;
        
    }
         void dfs(int node,unordered_map<int, list<int>>adj ,stack<int>s ,  unordered_map<int,          bool>visited){
          visited[node]=1;
         for(auto n: adj[node]){
             if(!visited[n]){
                  dfs(n,adj,s,visited);
                 //visited[i]=1;
             }
         }
         s.push(node);
     }
};   