/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    stack<TreeNode*> st;
    BSTIterator(TreeNode* root) {
        Lefttree(root);
    }
    
    int next() {
        TreeNode* top = st.top();
    st.pop();
    if (top->right != NULL)
        Lefttree(top->right);  //pushing right
 return top->val; 
    }
    
    bool hasNext() {
        return st.empty() ? false : true; //if stack is empty it means there is no next node
    }
    //this function to push all left part beacause it is inorder traversal left root right
    void Lefttree(TreeNode* root)
{
    TreeNode* p = root;
    while (p)
    {
        st.push(p); //pushing left because it is inorder traversal(left,root,right)
        p = p->left;
    }
}

};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
