class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
          int n1 = nums1.size();
        int n2 = nums2.size();
        // make sure first array is of smaller length i.e n1 < n2
        if(n1 > n2) return findMedianSortedArrays(nums2, nums1);
        int low = 0;
        int high = n1;
        while(low <= high)
        {
            int mid1 = (low + high) / 2;
          
            int mid2 = (n1 + n2 + 1) / 2 - mid1;
  
            int l1 = (mid1 - 1 < 0) ? INT_MIN : nums1[mid1 - 1];
            int l2 = (mid2 - 1 < 0) ? INT_MIN : nums2[mid2 - 1];
            int r1 = (mid1 == n1) ? INT_MAX : nums1[mid1];
            int r2 = (mid2 == n2) ? INT_MAX : nums2[mid2];
          
            if(l1 <= r2 && l2 <= r1)
            {
               
                if((n1 + n2) % 2 == 0) return (max(l1, l2) + min(r1, r2)) / 2.0;
              
                else return max(l1, l2);  
            }
            if(l1 > r2)
            {
                high = mid1 - 1;
            }
            if(l2 > r1)
            {
                low = mid1 + 1;
            }
        }
        return 0;
    }
    
};
//approach 1:- we can push both both vector into one seperate vector and then sort them and then find median of it.
//approach 2 :-find mid of both vector after that merge two left at same and two right at same
//if size of nums1 != nums2 then we will not use it. After that we can find median by taking max from left and min form right and then divide it by2.Condition is that left part of two merge should be less than right.
//if max of left is greater than min of right then we will shift our searching index